#!/bin/bash
#
# This build script is meant to be executed either from within
# the source directory created by extracting the tarball, or from
# the package user's home directory.
#
# If run from the home directory, there should be a source
# tarball in $HOME/src; it will be unpacked.  The top-level
# directory created by unpacking the tarball should start with
# the package user name.  Then, if there are patches in a
# directory $HOME/patches, they will be applied.
#
# It will create 8 log files in the $HOME directory:
#   00-configure.log: All messages output during configure
#   00-configure.err: Just the errors output during configure
#   01-make.log: All messages output during make
#   01-make.err: Just the errors output during make
#   02-test.log: All messages output during make check
#   02-test.err: Just the errors output during make check
#   03-install.log: All messages output during make install
#   03-install.err: Just the errors output during make install
#
# After running the script you should check the *.err files to see
# if any problems have occurred. If that is the case, use the corresponding
# *.log files to see the error messages in context.

function run_cmd()
{
    LOG=$1
    COMMAND=$2
    BEFORE=$(date +%s)
    echo "Running $COMMAND"
    { $COMMAND 3>&1 1>&2 2>&3 | tee "${LOG}.err" ;} &> "${LOG}.log"
    #{ $COMMAND 3>&1 1>&2 2>&3 | tee "${LOG}.err" ;} 2>&1 | tee "${LOG}.log"
    #$COMMAND 3>&1 1>&2 2>&3 | tee "${LOG}.err" 2>&1 | tee "${LOG}.log"
    for i in "${PIPESTATUS[@]}" 
    do
        if [ $i != 0 ]; then
            echo "---------------------------Errors---------------------------------"
            cat ${LOG}.err
            echo "------------------------------------------------------------------"
            AFTER=$(date +%s)
            echo "$COMMAND FAILED! ($(($AFTER - $BEFORE)) seconds)"
            return 1
        fi
    done
    AFTER=$(date +%s)
    echo "---------------------------Errors---------------------------------"
    cat ${LOG}.err
    echo "------------------------------------------------------------------"
    echo "$COMMAND successful! ($(($AFTER - $BEFORE)) seconds)"
    return 0
}
