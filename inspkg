#!/bin/bash

# Install a packed package. Read the file list, find collisions, install info file, copy $config to $config.new.1, run libtools, ldconfig

. /usr/local/lib/liblake_common
check_commondirs

usage() {
    echo "usage: $(basename $0) packedpkg"
}

if [ $# -ne 1 ]; then
    usage
    exit $E_WARGS
fi

if [ ! -e $1 ]; then
    echo "$1 not exists"
    exit $E_BADDIR
fi

# Definitions. Main routine begins at line 219

parse_list() {
    local file
    local otherpkg

    # check for info
    grep "\.info$" $list > $info
    # remove etcs from $list
    grep "^etc/" $list > $etc
    sed -i "\:^etc/:d" $list

    # now check for conflicts
    while read file
    do
        if [ ! -d /$file -a -e /$file ]; then
            otherpkg=$(find_belongs $file) # $file should be without leading /
            echo "$file : $otherpkg" >> $conflict
        fi
    done <$list

    if [ -f $conflict ] && [ "$(cut -d' ' -f1 <<<$(wc -l $conflict))" -gt "0" ]
    then
        vim $conflict &&
        handle_conflict
    fi
}

install_info() {
    if [ -s $info ]; then
        local infofile
        echo "Updating $infodir/dir..."
        while read infofile
        do
            echo $infofile
            install-info /$infofile $infodir/dir
        done < $info
        echo done
    fi
    rm $info
}

install_etc() {
   if [ -s $etc ]; then
       local config
       echo "Installing config files in /etc"
        while read config
        do
            if [ -e /$config ]; then
                cp --preserve=mode --no-dereference $config /$config.new
                echo "$config installed as /$config.new"
            else
                cp --preserve=mode --no-dereference $config /$config
                echo "$config installed"
            fi
        done < $etc
        echo done
   fi
   rm $etc
}

find_belongs() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local line=$(head -n1 <<< $(grep "^$1$" $currents/*)) # head seems to be some magic here that joins the lines?
    line=$(cut -d":" -f1 <<< "$line")

    if [[ "z$line" == "z" ]]; then
        return 0
    fi

    line=$(basename ${line%.*})
    echo $line
}

handle_conflict() {
    local line
    local file
    local cpkg

    while read line
    do
        file=$(cut -d':' -f1 <<<"$(sed -e 's/^#//' <<<$line)") # $file should be without leading /
        cpkg=$(cut -d':' -f2 <<<"$(sed -e 's/^#//' <<<$line)")
        if grep -q '^#' <<<"$line" # with '#', we mean that we want to keep the old file
        then
            echo "Will keep old $file"
            rm_from_pkg $file $cpkg
        else
            echo "Will remove old $file"
            if [ ! "$cpkg" ]
            then
                sys_backup_file $file
            else
                recollect_file $file $cpkg
            fi
        fi
    done <$conflict
}

rm_from_pkg() {
    if [ $# -lt 1 ] # $2 is the conflicted package, if any
    then
        return $E_WARGS
    fi

    local file=$1
    local cf=$2

    echo removing $file from $pkgfname
    sed -i "\:^${file}$:d" $list &&

    tar -rf $backupdir/$pkgfname-$cf.tar $file &&
    rm $file
}

sys_backup_file() {
    if [ $# -lt 1 ] # $1 is the file to backup
    then
        return $E_WARGS
    fi

    echo removing /$1 from system
    tar rf $backupdir/conflict.tar /$1 &&
    rm /$1
}

recollect_file() {
    if [ $# -lt 2 ]
    then
        return $E_WARGS
    fi

    local file=$1
    local cf=$2
    local clist=$currents/${cf}.list

    echo removing /$file from $cf
    sed -i "\:^${file}$:d" $clist &&
    tar rf $backupdir/$cf-$pkgfname.tar /$file &&
    rm /$file
}

handle_collision() {  # this is not good enough
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local conflict=$(find_belongs $1)

    if [ "$conflict" ]
    then
        echo -n "$1 is in $conflict. Replace it? [y/n] "
        while read command
        do
            case "$command" in
                y|Y)
                    sed -i "\%^$1$%d" $currents/${conflict}.list
                    rm $1
                    echo $1 removed from $conflict
                    return 0 ;;
                n|N)
                    echo $1 kept in $conflict
                    return 1 ;;
                *)
                    echo "Do as I say!"
                    continue ;;
            esac
        done
    else
        echo -n "$1 is not found in any packages. Replace it? [y/n] "

        while read command
        do
            case "$command" in
                y|Y)
                    rm $1
                    echo $1 removed
                    return 0 ;;
                n|N)
                    echo $1 kept
                    return 1 ;;
                *)
                    echo "Do as I say!"
                    continue ;;
            esac
        done
    fi
}

# Definition finished. Now comes the main routine

pkgfile=$(realpath $1)
pkgfname=$(basename $1)
pkgfname=${pkgfname%.pkg*}
tmpdir=/tmp/$pkgfname
listname=$pkgfname.list

if [ -e $currents/$listname ]; then
    echo "$pkgfname already installed. Skip it."
    exit
fi

list=.LIST
info=.INFO
etc=.ETC
failed=.FAILED
conflict=.CONFLICT

mk_dir $tmpdir
cd $tmpdir

tar xf $pkgfile || exit $E_BADARCHIVE

if [ ! -e $list ]; then
    echo "$list not found in package. Exiting"
    exit $E_BADPKG
fi

parse_list # it handles collision, check for infos and etcs

while read -u 4 file # $file should be like "usr/lib/libfoo", without leading /
do
    if [ ! -e $file ]
    then
        echo $file not found
        exit $E_BADFILE
    elif [ -d $file ]; then
        if [ -f /$file ]; then
            echo "/$file is not a directory, but $file is. Exiting..."
            exit $E_BADDIR
        elif [ ! -L $file ]; then
            mk_dir /$file
        elif [ ! -e /$file ]; then
            cp --preserve=mode --no-dereference $file /$file
        else
            echo "/$file is symlink to directory $(readlink /$file). Keep it."
        fi
    else
        echo install $file
        if [ -d /$file ]; then
            echo "/$file is a directory, but $file is not. Exiting..."
            exit $E_BADFILE
        elif [ -e /$file ]; then
            echo /$file exists
            handle_collision $file && cp --preserve=mode --no-dereference $file /$file || echo $file >> $failed
        else
            cp --preserve=mode --no-dereference $file /$file
        fi
    fi
done 4<$list

if [ -f $info ]; then
    install_info $info
fi

if [ -f $etc ]; then
    install_etc $etc
fi

cp -v $list $currents/$listname

rm -r $tmpdir
