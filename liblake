# vim: filetype=sh

# Error Codes
E_WARGS=1
E_BADDIR=85
E_BADFILE=86
E_BADARCH=87
E_NOTREADY=88

DEFAULT_ARCH=x86_64

lake() {
    pkg=$(basename $pkg)

    if [[ $pkg == *-* ]]
    then
        pkgver=${pkg##*-}
        if [[ $pkgver == [0-9]* ]]
        then
            pkgname=${pkg%-$pkgver}
        else
            pkgname=$pkg
            pkgver=""
        fi
    else
        pkgname=$pkg
    fi

    pkgdir=$pkgs/$pkgname
    verdir=$pkgdir/$pkgver
    pkgfname=${pkgname}-${pkgver}-${arch}
    cmdfile=$verdir/$pkgfname
    listname=${pkgfname}.list
    listfile=$verdir/$listname
    fakeroot=$verdir/sysroot/$arch

    if [ "$cmd" == "print"  ]
    then
        echo $pkgfname: n: $pkgname v: $pkgver a: $arch
        exit 0
    fi

    if [ "$cmd" != "prepare" ] && ! is_ready
    then
        echo "$pkgfname not ready. Run \"lake prepare $pkgfname\" first"
        exit $E_NOTREADY
    fi

    case "_$cmd" in
        _print)
            echo $pkgfname
            ;;
        _prepare)
            prepare_dir
            ;;
        _createlist)
            create_list
            ;;
        _create)
            create_list
            cd $fakeroot
            tar cjf $verdir/${pkgfname}.tar.bz2 *
            ;;
        _checkconflict)
            check_collision $listfile
            ;;
        _backup)
            ;;
        _install)
            if [[ z"$pkgver" == z ]]
            then
                echo "install: must specify version"
                exit $E_WARGS
            fi

            if [ -e $currents/$listname ]
            then
                echo $pkgfname already installed
                return 0
            fi

            create_list
            install_list $fakeroot $listfile
            ln -sv $listfile $currents ;;
        _remove)
            if [[ z"$pkgver" == z ]]
            then
                echo "remove: must specify version"
                exit $E_WARGS
            elif [ ! -d $pkgdir ]
            then
                echo "$pkgname doesn't exist"
                exit $E_WARGS
            fi

            if [ ! -e $currents/$listname ]
            then
                echo "$pkgname $pkgver $arch not installed"
            else
                remove_list $currents/$listname
                rm $currents/$listname
            fi
            ;;
        *)
            echo "$cmd not recognized" ;;
    esac
}


mk_dir() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local dir=$1
    if [ ! -e $dir ]
    then
        mkdir -p $dir
        echo "create $dir"
    elif [ ! -d $dir ]
    then
        echo "$dir not a directory"
        exit $E_BADDIR
    else
        echo "directory $dir exists"
    fi
}

mkpkgdir() {
    # create pkgdir, add ver/deps

    echo $pkgdir
    mk_dir $pkgdir
    mk_dir $pkgdir/log

    echo $verdir
    mk_dir $verdir
    mk_dir $verdir/backup
    mk_dir $fakeroot
    touch $verdir/deps
}

gen_list() {
    if [ $# -ne 2 ]
    then
        echo "usage: $0 dirname listname"
        exit 1
    fi

    local dir=$(realpath $1)
    local list=$2
    if [ ! -d $dir ]
    then
        echo "$dir not a directory"
        exit $E_BADDIR
    fi

    if [ -e $list -a ! -f $list ]
    then
        echo "$file not a regular file"
        exit $E_BADFILE
    fi

    if [ "$list" -nt "$dir" ]
    then
        echo "$list newer than $dir, not updated"
        return 0
    fi

    find $dir > $list
    sed -i "s@^$dir@@" $list
    sed -i "/^$/d" $list
}

install_list() {
    if [ $# -ne 2 ]
    then
        echo "usage: $0 filesdir listname"
        exit 1
    fi

    local dir=$1
    local list=$2
    local tmp=${list}.tmp # notice that $list is probably in its absolute path
    local file

    if [ ! -s $list ]
    then
        echo "Nothing to install"
        exit 0
    fi

    check_for_info $list
    check_collision $list

    if [ ! -s $tmp ]
    then
        cp $list $tmp
        rm $list.failed
    fi


    while read -u 4 file
    do
        if [ ! -e $dir/$file ]
        then
            echo $dir/$file not found
            exit $E_BADFILE
        elif [ -d $dir/$file -a ! -L $dir/$file ]
        then
            mk_dir $file
        else
            echo install $file
            if [ -e $file ]
            then
                echo $file exists
                handle_collision $file && cp --preserve=mode --no-dereference $dir/$file $file || echo $file >> $list.failed
            else
                cp --preserve=mode --no-dereference $dir/$file $file
            fi
        fi
        sed -i "1d" $tmp
    done 4<$tmp

    install_info_dir ${list}.info

    if [ -s $list.failed ]
    then
        echo "-----------failed--------------------"
        cat $list.failed
    fi

    rm $tmp
}

remove_list() {
    if [ $# -ne 1 ]
    then
        echo "usage: $0 listname"
        exit 1
    fi

    local list=$1
    local tmp=${list}.tmp # notice that $list is probably in its absolute path

    local file

    if [ ! -s $list ]
    then
        echo "Nothing to remove"
        exit 0
    fi

    if [ ! -s $tmp ]
    then
        cp $list $tmp
    fi

    tac $tmp | while read file
    do
        if [ ! -e $file ]
        then
            echo $file not found
        elif [ -d $file ]
        then
            if [ ! "$(ls -A $file)" ]
            then
                echo remove $file
                rm -r $file
            else
                echo directory $file not empty, leave it alone
            fi
        else
            echo remove $file
            rm $file
        fi
        sed -i "$ d" $tmp
    done

    if [ -e ${list}.failed ]
    then
        mv ${list}.failed{,.old}
    fi

    rm $tmp # remove tmp last, so $dirs will not be overwited when interrupted during dir cleaning
}

prepare_dir() {
    if ! is_ready
    then
        echo "not ready"
        mkpkgdir
        mkcmd
    fi
}

is_ready() {
    if [ ! -d $pkgdir ]
    then
        return 1
    fi

    if [ ! "$pkgver" ]
    then
        return 0
    fi

    if [ -d $fakeroot ]
    then
        return 0
    else
        return 1
    fi
}

create_list() {
    gen_list $fakeroot $listfile
}

mkcmd() {
    if [ ! -e $cmdfile ]
    then
        . /usr/local/lib/mkcmd-${arch}.sh
    fi
}

check_collision() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local list=$1
    local file
    local conffile=${listfile}.conflict
    local conflict

    rm $conffile

    while read file
    do
        if [ ! -d $file -a -e $file ]
        then
            conflict=$(find_belongs $file)
            if [ "$conflict" != "$pkgfname" ]
            then
                echo "$file : $conflict" >> $conffile
            fi
        fi
    done <$list

    if [ -f $conffile ] && [ "$(cut -d' ' -f1 <<<$(wc -l $conffile))" -gt "0" ]
    then
        vim $conffile
        handle_conffile $conffile
    fi
}

find_belongs() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local line=$(head -n1 <<< $(grep "^$1$" $currents/*))
    local list=$(cut -d":" -f1 <<< "$line")

    if [[ "z$list" == "z" ]]
    then
        return 0
    fi

    list=$(basename ${list%.*})

    echo $list
}

handle_conffile() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi
    local conffile=$1
    local file
    local cpkg

    while read line
    do
        file=$(cut -d':' -f1 <<<"$(sed -e 's/^#//' <<<$line)")
        cpkg=$(cut -d':' -f2 <<<"$(sed -e 's/^#//' <<<$line)")
        if grep -q '^#' <<<"$line" # with '#', we mean that we want to keep the old file
        then
            echo "Will keep old $file"
            rm_from_fakeroot $file "conflict"
        else
            echo "Will remove old $file"
            if [ ! "$cpkg" ]
            then
                sys_backup_file $file "conflict"
            else
                recollect_file $file $cpkg "conflict"
            fi
        fi
    done <$conffile
}

sys_backup_file() {
    if [ $# -lt 2 ]
    then
        return $E_WARGS
    fi

    local file=$1
    local name=$2

    echo removing $file from system
    tar rf $pkgs/backup/$name.tar $file &&
    rm $file
}

rm_from_fakeroot() {
    if [ $# -lt 2 ]
    then
        return $E_WARGS
    fi

    local file=$1
    local name=$2

    echo removing $file from $pkgfname
    sed -i "\:^${file}$:d" $listfile &&

    file=${file#/}
    tar -C $fakeroot -rf $verdir/backup/$pkgfname-$name.tar $file &&
    rm $fakeroot/$file
}

recollect_file() {
    if [ $# -lt 3 ]
    then
        return $E_WARGS
    fi

    local file=$1
    local p=$(cut -d'-' -f1 <<<"$2")
    local v=$(cut -d'-' -f2 <<<"$2")
    local a=$(cut -d'-' -f3 <<<"$2")
    local f=$p-$v-$a
    local vd=$pkgs/$p/$v
    local list=$pkgs/$p/$v/${f}.list
    local name=$3

    echo removing $file from $p $v $a
    sed -i "\:^${file}$:d" $list &&
    tar rf $vd/backup/$f-$name.tar $file &&
    rm $file
}

handle_collision() {  # this is not good enough
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local conflict=$(find_belongs $1)

    if [ z"$conflict" == z"${pkg}-${arch}" ]
    then
        return 0
    fi

    if [ "$conflict" ]
    then
        echo -n "$1 is in $conflict. Replace it? [y/n] "
        while read command
        do
            case "$command" in
                y|Y)
                    sed -i "\%^$1$%d" $currents/${conflict}.list
                    rm $1
                    echo $1 removed from $conflict
                    return 0 ;;
                n|N)
                    echo $1 kept in $conflict
                    return 1 ;;
                *)
                    echo "Do as I say!"
                    continue ;;
            esac
        done
    else
        echo -n "$1 is not found in any packages. Replace it? [y/n] "

        while read command
        do
            case "$command" in
                y|Y)
                    rm $1
                    echo $1 removed
                    return 0 ;;
                n|N)
                    echo $1 kept
                    return 1 ;;
                *)
                    echo "Do as I say!"
                    continue ;;
            esac
        done
    fi
}

check_for_info() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local list=$1

    grep "\.info$" $list > ${list}.info
    sed -i "\:^${infodir}$:d" $list
}

install_info_dir() {
    if [ $# -ne 1 ]
    then
        return $E_WARGS
    fi

    local list=$1

    if [ -s $list ]
    then
        echo install-info
        while read infofile
        do
            install-info $infofile $infodir
        done < $list
    fi

    rm $list
}
